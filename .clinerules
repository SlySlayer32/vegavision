# You MUST use the `new_task` tool: Structured Task Decomposition Strategy Guide

## ⚠️ CRITICAL INSTRUCTIONS - YOU MUST FOLLOW THESE GUIDELINES ⚠️**

This guide provides **MANDATORY** instructions for effectively breaking down complex tasks into structured subtasks and implementing an automated handoff process between subtasks. You **MUST** follow these guidelines to ensure continuity, context preservation, and efficient task completion.

## ⚠️ SUBTASK COMPLETION MONITORING - MANDATORY ACTION REQUIRED ⚠️

You **MUST** monitor subtask completion status and automatically initiate a task handoff using the `new_task` tool when each subtask is completed. Additionally, you **MUST** initiate a handoff when context window usage exceeds 50% of the available context window.

Example of context window usage over it's 50% with a 2 million token context window:

```text
# Context Window Usage

1,050,000 / 2,000,000 tokens (52.5%)
Model: gemini:gemini-pro-002 (2M context window)
```

**IMPORTANT**: When you complete a subtask OR see context window usage at or above 50%, you MUST:

1. Complete your current logical step
2. Use the `ask_followup_question` tool to offer creating a new task for the next subtask
3. If approved, use the `new_task` tool with comprehensive handoff instructions preloaded for the next subtask

## Task Breakdown in Plan Mode - REQUIRED PROCESS

Plan Mode is specifically designed for analyzing complex tasks and breaking them into manageable subtasks. When in Plan Mode, you **MUST**:

### 1. Initial Task Analysis - REQUIRED

- **MUST** begin by thoroughly understanding the full scope of the user's request
- **MUST** identify all major components and dependencies of the task
- **MUST** consider potential challenges, edge cases, and prerequisites

### 2. Strategic Task Decomposition - REQUIRED

- **MUST** break the overall task into logical, discrete subtasks
- **MUST** prioritize subtasks based on dependencies (what must be completed first)
- **MUST** aim for subtasks that can be completed within a single session (15-30 minutes of work)
- **MUST** consider natural breaking points where context switching makes sense

### 3. Creating a Task Roadmap - REQUIRED

- **MUST** present a clear, numbered list of subtasks to the user
- **MUST** explain dependencies between subtasks
- **MUST** provide time estimates for each subtask when possible
- **MUST** use Mermaid diagrams to visualize task flow and dependencies when helpful

```mermaid
graph TD
    A[Main Task] --> B[Subtask 1: Setup]
    A --> C[Subtask 2: Core Implementation]
    A --> D[Subtask 3: Testing]
    A --> E[Subtask 4: Documentation]
    B --> C
    C --> D
```

### 4. Getting User Approval - REQUIRED

- **MUST** ask for user feedback on the proposed task breakdown
- **MUST** adjust the plan based on user priorities or additional requirements
- **MUST** confirm which subtask to begin with
- **MUST** request the user to toggle to Act Mode when ready to implement

## Automated Subtask Implementation and Handoff Process - MANDATORY PROCEDURES

When implementing tasks in Act Mode, you **MUST** follow these guidelines for automated task handoff:

### 1. Focused Implementation - REQUIRED

- **MUST** focus on completing the current subtask fully
- **MUST** document progress clearly through comments and commit messages
- **MUST** create checkpoints at logical completion points

### 2. Recognizing Completion Points - CRITICAL

You **MUST** identify subtask completion points when:

- The current subtask is fully completed
- You've reached a logical stopping point in a larger subtask
- The implementation is taking longer than expected and can be continued later
- The task scope has expanded beyond the original plan
- **CRITICAL**: The context window usage exceeds 50% (e.g., 1,000,000+ tokens for a 2M context window)

### 3. Automatically Initiating the Handoff Process - MANDATORY ACTION

When you've reached a subtask completion point, you **MUST**:

1. Summarize what has been accomplished so far
2. Clearly state which subtask is next in the sequence
3. **MANDATORY**: Use the `ask_followup_question` tool to offer creating a new task:

```xml
<ask_followup_question>
<question>I've completed [current subtask]. Would you like me to automatically create a new task to continue with [next subtask], preloading the following context?</question>
<options>["Yes, create new task", "Modify context first", "No, continue this session"]</options>
</ask_followup_question>
```

### 4. Automatically Creating a New Task with Preloaded Context - REQUIRED ACTION

If the user agrees to create a new task, you **MUST** use the `new_task` tool with comprehensive handoff instructions preloaded for the next subtask:

```xml
<new_task>
<context>

# Task Continuation: [Next Subtask Title]

## Completed Work

- [Detailed list of completed subtasks]
- [Include specific files modified/created]
- [Note any important decisions made]

## Current State

- [Description of the current state of the project]
- [Any running processes or environment setup]
- [Key files and their current state]

## Next Steps

- [Detailed description of the next subtask]
- [Specific implementation details to address]
- [Any known challenges to be aware of]

## Reference Information

- [Links to relevant documentation]
- [Important code snippets or patterns to follow]
- [Any user preferences noted during the current session]

Please continue the implementation by [specific next action for this subtask].
</context>
</new_task>
```

## ⚠️ CRITICAL - TASK CONTINUATION BEHAVIOR ⚠️**

When starting a new task after a handoff, you **MUST**:

- **MUST** follow the continuation plan provided in the context **WITHOUT** asking the user for additional input first
- **MUST NOT** ask the user to provide error output or other debugging information before taking action
- **MUST** immediately begin implementing the next steps outlined in the context
- **MUST** proactively search for errors or issues yourself using the appropriate tools
- **MUST** work autonomously based on the preloaded context until you encounter a genuine blocker

### 5. Preloaded Context for Next Subtask - MANDATORY COMPONENTS

#### Project Context - REQUIRED

- **MUST** include the overall goal and purpose of the project
- **MUST** include key architectural decisions and patterns
- **MUST** include technology stack and dependencies

#### Subtask Details - REQUIRED

- **MUST** provide a clear title and description of the next subtask
- **MUST** explain how this subtask relates to the overall task
- **MUST** outline the expected outcomes of this subtask
- **MUST** list any prerequisites or dependencies for this subtask

#### Implementation Guide - REQUIRED

- **MUST** list files that will need to be created or modified for this subtask
- **MUST** describe specific functions, classes, or components to implement
- **MUST** explain design patterns to follow
- **MUST** outline testing approach for this subtask

#### Progress Tracking - REQUIRED

- **MUST** provide checklist of completed subtasks
- **MUST** provide checklist of remaining subtasks
- **MUST** note any blockers or challenges anticipated

#### User Preferences - REQUIRED

- **MUST** note coding style preferences mentioned by the user
- **MUST** document specific approaches requested by the user
- **MUST** highlight priority areas identified by the user

## Best Practices for Effective Automated Handoffs - MANDATORY GUIDELINES

### 1. Maintain Continuity - REQUIRED

- **MUST** use consistent terminology between subtasks
- **MUST** reference previous decisions and their rationale
- **MUST** maintain the same architectural approach unless explicitly changing direction

### 2. Preserve Context - REQUIRED

- **MUST** include relevant code snippets in the handoff
- **MUST** summarize key discussions from the previous session
- **MUST** reference specific files and line numbers when applicable

### 3. Set Clear Next Actions - REQUIRED

- **MUST** begin the handoff with a clear, actionable next step for the specific subtask
- **MUST** prioritize implementation items within the subtask
- **MUST** highlight any decisions that need to be made

### 4. Document Assumptions - REQUIRED

- **MUST** clearly state any assumptions made during implementation
- **MUST** note areas where user input might be needed
- **MUST** identify potential alternative approaches

### 5. Optimize for Resumability - REQUIRED

- **MUST** structure the handoff so the next subtask can begin immediately
- **MUST** include setup instructions if environment configuration is needed
- **MUST** provide a quick summary at the top for rapid context restoration

## Example Task Handoff with Preloaded Context

### Example #1 of an effective automated task handoff

```xml
<new_task>
<context>

# Task Continuation: Implement User Login Functionality (Subtask 2)

## Completed Work (Subtask 1)

- Created basic Express.js server structure
- Implemented MongoDB connection and user schema
- Completed user registration endpoint with password hashing
- Added input validation using Joi
- Created initial test suite for registration endpoint

## Current State

- Server runs successfully on port 3000
- MongoDB connection is established
- Registration endpoint (/api/users/register) is fully functional
- Test suite passes for all registration scenarios

## Next Steps (Subtask 2)

1. Implement login endpoint (/api/users/login)
   - Use bcrypt to compare passwords
   - Generate JWT token upon successful login
   - Add proper error handling for invalid credentials
2. Create authentication middleware
   - Verify JWT tokens
   - Extract user information
   - Handle expired tokens
3. Add test cases for login functionality

## Reference Information

- JWT secret should be stored in .env file
- Follow the existing error handling pattern in routes/users.js
- User schema is defined in models/User.js
- Test patterns are established in tests/auth.test.js

Please continue by implementing the login endpoint following the same patterns established in the registration endpoint.
</context>
</new_task>
```

### Example #2 of an ineffective task handoff

## *(Note: This example lacks the specific details needed for the next subtask and doesn't properly preload context for continuation)*

## When to Use Automated Task Handoffs - MANDATORY TRIGGERS

You **MUST** initiate automated task handoffs in these scenarios:

1. **CRITICAL**: When a subtask is completed as defined in the task breakdown
2. **CRITICAL**: When context window usage exceeds 50% (e.g., 1,000,000+ tokens for a 2M context window)
3. **When switching between distinct components** of the larger project
4. **When different expertise** might be beneficial for different subtasks

## **⚠️ FINAL REMINDER - CRITICAL INSTRUCTION ⚠️**

You **MUST** monitor subtask completion status and automatically initiate a task handoff using the `new_task` tool when each subtask is completed. You **MUST** also monitor the context window usage in the environment details section. When it exceeds 50% (e.g., "1,050,000 / 2,000,000 tokens (52.5%)"), you **MUST** proactively initiate the task handoff process using the `ask_followup_question` tool followed by the `new_task` tool with preloaded context for the next subtask. You MUST use the `new_task` tool.

By strictly following these guidelines, you'll ensure smooth transitions between subtasks, maintain project momentum, and provide the best possible experience for users working on complex, multi-session projects.

## User Interaction & Workflow Considerations

- **Automated Sequence:** Using `new_task` creates an automated sequence of subtasks. Each subtask handoff is pre-configured with context for the next subtask in the sequence.
- **User Approval:** You always have control, approving the handoff and having the chance to modify the context Cline proposes to carry forward.
- **Flexibility:** The core `new_task` tool is a flexible building block. Experiment with `.clinerules` to create workflows that best suit your needs, whether for strict context management, task decomposition, or other creative uses.
