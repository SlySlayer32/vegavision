// **************************************************************************
// TypeAdapterGenerator
// **************************************************************************

class EditResultAdapter extends TypeAdapter<EditResult> {
  @override
  final int typeId = 2;

  @override
  EditResult read(BinaryReader reader) {
    final numOfFields = reader.readByte();
    final fields = <int, dynamic>{
      for (int i = 0; i < numOfFields; i++) reader.readByte(): reader.read(),
    };
    return EditResult(
      id: fields[0] as String,
      imageId: fields[1] as String,
      originalImageId: fields[2] as String,
      editedImagePath: fields[3] as String,
      resultImagePath: fields[4] as String?,
      downloadUrl: fields[5] as String?,
      createdAt: fields[6] as DateTime,
      expiresAt: fields[7] as DateTime?,
      status: fields[8] as InvalidType,
      errorMessage: fields[9] as String?,
      processingTimeMs: fields[10] as int?,
      confidenceScores: (fields[11] as Map?)?.cast<String, double>(),
      metrics: fields[12] as ProcessingMetrics?,
    );
  }

  @override
  void write(BinaryWriter writer, EditResult obj) {
    writer
      ..writeByte(13)
      ..writeByte(0)
      ..write(obj.id)
      ..writeByte(1)
      ..write(obj.imageId)
      ..writeByte(2)
      ..write(obj.originalImageId)
      ..writeByte(3)
      ..write(obj.editedImagePath)
      ..writeByte(4)
      ..write(obj.resultImagePath)
      ..writeByte(5)
      ..write(obj.downloadUrl)
      ..writeByte(6)
      ..write(obj.createdAt)
      ..writeByte(7)
      ..write(obj.expiresAt)
      ..writeByte(8)
      ..write(obj.status)
      ..writeByte(9)
      ..write(obj.errorMessage)
      ..writeByte(10)
      ..write(obj.processingTimeMs)
      ..writeByte(11)
      ..write(obj.confidenceScores)
      ..writeByte(12)
      ..write(obj.metrics);
  }

  @override
  int get hashCode => typeId.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is EditResultAdapter &&
          runtimeType == other.runtimeType &&
          typeId == other.typeId;
}
